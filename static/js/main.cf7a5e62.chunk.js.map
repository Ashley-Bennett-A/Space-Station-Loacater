{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","width","height","MapContainer","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onClose","icon","url","scaledSize","options","google","zoom","style","initialCenter","lat","latitude","lng","longitude","inherits","createClass","key","value","className","loading","console","log","maps","react_default","a","createElement","dist","onClick","name","visible","React","Component","GoogleApiWrapper","apiKey","App","error","map","undefined","_this2","fetch","then","results","json","data","Map","iss_position","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf7a5e62.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\n//  Styling of the map includng size\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nexport class MapContainer extends React.Component {\n  state = {\n    showingInfoWindow: false, //Hides or the shows the infoWindow\n    activeMarker: {}, //Shows the active marker upon click\n    selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n  };\n\n  //    When clicked on changes the state to show\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  //    Closes info box\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  //    Custom icon\n  icon = {\n    url: \"https://www.stickpng.com/assets/images/585f967bcb11b227491c3591.png\",\n    scaledSize: { width: 32, height: 32 }\n  };\n\n  options = {\n    google: this.props.google,\n    zoom: 5,\n    style: mapStyles,\n    initialCenter: {\n      lat: this.props.latitude,\n      lng: this.props.longitude\n    }\n  };\n\n  render() {\n    let className = this.props.loading ? \"loading\" : \"loaded\";\n    console.log(this.props.google.maps);\n    return (\n      <div className={className}>\n        <Map {...this.options}>\n          <Marker\n            onClick={this.onMarkerClick}\n            name={\"International Space Station is directly above here\"}\n            icon={this.icon}\n          />\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow>\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyB7oIAIYUzlDEhJ_bbfagxHFyJVSYYEhRs\"\n})(MapContainer);\n","import React from \"react\";\nimport \"./App.css\";\nimport MapContainer from \"./components/Map\";\n\nclass App extends React.Component {\n  state = {\n    loading: true,\n    longitude: \"\",\n    latitude: \"\",\n    error: false,\n    map: undefined\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.open-notify.org/iss-now.json\")\n      .then(results => {\n        return results.json();\n      })\n      .then(data => {\n        let map = (\n          <div className=\"mapContainer\">\n            <MapContainer\n              latitude={data.iss_position.latitude}\n              longitude={data.iss_position.longitude}\n            />\n          </div>\n        );\n\n        this.setState({ map: map });\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          {\" \"}\n          Where in the world is the International Space Station overhead right\n          now?\n        </h1>\n        {this.state.map}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}